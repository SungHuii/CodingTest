# 문제 : 1이 될때까지
# 어떠한 수 n이 1이 될때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다.
# 단, 두 번째 연산은 n이 k로 나누어떨어질 때만 선택할 수 있다.
# 1. n에서 1을 뺀다.
# 2. n을 k로 나눈다.
# 예를 들어 n이 17이고 k가 4라고 가정하자. 1번의 과정을 한 번 수행하면 n은 16이 된다.
# 이후에 2번의 과정을 두 번 수행하면 n은 1이 된다.
# 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 n을 1로 만드는 최소 횟수이다.
# n과 k가 주어질 때 n이 1이 될때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하시오.

# 주어진 n에 대하여 최대한 많이 나누기 연산을 수행하면 된다.
# n의 값을 줄일 때, 2 이상의 수로 나누는 작업이 1을 빼는 작업보다 수를 훨씬 많이 줄일 수 있다.
# 예를 들어 17의 경우 1을 빼는 작업을 2번 수행하면 1이 되지만, 4로 나누는 작업을 한 번 수행하면 4가 되어 3번의 과정을 수행하게 된다.

# 정당성 분석
# 가능하면 최대한 많이 나누는 작업이 최적의 해를 항상 보장할 수 있을까?
# 가능하다. 예를 들어 17의 경우 1을 빼는 작업을 2번 수행하면 1이 되지만, 4로 나누는 작업을 한 번 수행하면 4가 되어 3번의 과정을 수행하게 된다.
# n이 아무리 큰 수여도, k로 나누는 것을 반복하면 기하급수적으로 빠르게 1로 만들 수 있다.
# 또한 n은 항상 1에 도달하게 된다.

# n, k를 공백으로 구분하여 입력받기
n, k = map(int, input().split())

result = 0

while True:
    # n이 k로 나누어 떨어지는 수가 될 때까지 빼기
    target = (n // k) * k
    result += (n - target)
    n = target
    # n이 k보다 작을 때(더 이상 나눌 수 없을 때) 반복문 탈출
    if n < k:
        break
    # k로 나누기
    result += 1
    n //= k

# 마지막으로 남은 수에 대하여 1씩 빼기
result += (n - 1)
print(result)